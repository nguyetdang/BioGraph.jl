var documenterSearchIndex = {"docs":
[{"location":"#BioGraph.jl","page":"Home","title":"BioGraph.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Latest Release) (Image: Build Status) (Image: Documentation) (Image: MIT license)","category":"page"},{"location":"#Description","page":"Home","title":"Description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BioGraph is a Julia package for handle genome graph in the GFA format. It reads information from GFA input, extract simple bidirected graphs and find the longest linear path in those graphs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Complete documentation is available here","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can install BioGraph from the julia REPL. Press ] to enter pkg mode, and enter the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"add BioGraph","category":"page"},{"location":"function/#BioGraph-Function","page":"Function","title":"BioGraph Function","text":"","category":"section"},{"location":"function/#Read-GFA","page":"Function","title":"Read GFA","text":"","category":"section"},{"location":"function/","page":"Function","title":"Function","text":"read_from_gfa","category":"page"},{"location":"function/#BioGraph.read_from_gfa","page":"Function","title":"BioGraph.read_from_gfa","text":"read_from_gfa(filename::AbstractString; weight_file::String)\n\nRead graph from GFA file and optional weight_file (contains two column node and weight) and return GFAResult struct which  has g - the graph, w - weight array, l - node label array and e - edge label array.\n\n\n\n\n\n","category":"function"},{"location":"function/#Graph-Component","page":"Function","title":"Graph Component","text":"","category":"section"},{"location":"function/","page":"Function","title":"Function","text":"find_graph_component\nget_summary(g_coms::BioGraph.GraphComponent)\nget_summary(g_coms::BioGraph.GraphResult)\nget_terminus(g_result::BioGraph.GraphResult; outfile::String)\nget_gfa(g_result::BioGraph.GraphResult; outfile::String)","category":"page"},{"location":"function/#BioGraph.find_graph_component","page":"Function","title":"BioGraph.find_graph_component","text":"find_graph_component(gfa_result::BioGraph.GFAResult)\n\nReturn graph components of GFAResult:\n\nSimple Graphs\nLone Cycles\nLone Nodes\n\n\n\n\n\n","category":"function"},{"location":"function/#BioGraph.get_summary-Tuple{BioGraph.GraphComponent}","page":"Function","title":"BioGraph.get_summary","text":"get_summary(g_coms::BioGraph.GraphComponent)\n\nSummary of GraphComponent.\n\n\n\n\n\n","category":"method"},{"location":"function/#BioGraph.get_summary-Tuple{BioGraph.GraphResult}","page":"Function","title":"BioGraph.get_summary","text":"get_summary(g_coms::BioGraph.GraphResult)\n\nSummary of GraphResult:\n\nNo of vertices\nNo of edges\nNo of source nodes\nNo of end nodes\n\n\n\n\n\n","category":"method"},{"location":"function/#BioGraph.get_terminus-Tuple{BioGraph.GraphResult}","page":"Function","title":"BioGraph.get_terminus","text":"get_terminus(g_result::BioGraph.GraphResult; outfile::String)\n\nGet all source and sink nodes of GraphResult. Write to CSV, including data from GFA.\n\n\n\n\n\n","category":"method"},{"location":"function/#BioGraph.get_gfa-Tuple{BioGraph.GraphResult}","page":"Function","title":"BioGraph.get_gfa","text":"get_gfa(g_result::BioGraph.GraphResult; outfile::String)\n\nGet GFA output of GraphResult.\n\n\n\n\n\n","category":"method"},{"location":"function/#Longest-Path","page":"Function","title":"Longest Path","text":"","category":"section"},{"location":"function/","page":"Function","title":"Function","text":"find_longest_path\nget_gfa(g_result::BioGraph.LongestPath; outfile::String)\nget_fasta(g_result::BioGraph.LongestPath; outfile::String)","category":"page"},{"location":"function/#BioGraph.find_longest_path","page":"Function","title":"BioGraph.find_longest_path","text":"find_longest_path(graph_result::BioGraph.GraphResult, optimizer_factory; has_cycle::Bool, is_weighted::Bool, source_node::Int64, sink_node::Int64)\n\nFind longest path in graph. Input:\n\nGraphResult\nJuMP optimizer_factory such as CPLEX.Optimizer\nhas_cycle: if true find longest path which has cycles.\nis_weighted: if true find shortest path which is weighted\nsource_node, sink_node: find longest path which has source and sink nodes.\n\n\n\n\n\n","category":"function"},{"location":"function/#BioGraph.get_gfa-Tuple{BioGraph.LongestPath}","page":"Function","title":"BioGraph.get_gfa","text":"get_gfa(g_result::BioGraph.LongestPath; outfile::String)\n\nGet GFA output of LongestPath.\n\n\n\n\n\n","category":"method"},{"location":"function/#BioGraph.get_fasta-Tuple{BioGraph.LongestPath}","page":"Function","title":"BioGraph.get_fasta","text":"get_fasta(g_result::BioGraph.LongestPath; outfile::String)\n\nGet FastA output of LongestPath.\n\n\n\n\n\n","category":"method"}]
}
